{
  "version": "1.0.1-beta.0",
  "skillsName": "lua-skill",
  "tools": [
    {
      "name": "get_weather",
      "description": "Get the weather for a given city",
      "inputSchema": {
        "type": "object",
        "properties": {
          "city": {
            "type": "string"
          }
        },
        "required": [
          "city"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "city": {
            "type": "string"
          }
        },
        "required": [
          "city"
        ]
      },
      "execute": "async (input) => {\nconst { z } = require('zod');\nclass GetWeatherMain {\n\n    constructor() {\n    }\n\n    async getWeather(city) {\n        return { weather: \"sunny\", city: city };\n    }\n\n}\n\n        return { weather: \"sunny\", city: input.city \n}"
    },
    {
      "name": "get_user_data",
      "description": "Get the user data for a given user id",
      "inputSchema": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          }
        },
        "required": [
          "userId"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          }
        },
        "required": [
          "userId"
        ]
      },
      "execute": "async (input) => {\nconst { z } = require('zod');\nconst axios = require('axios');\nclass ApiService {\n\n    baseUrl;\n    timeout;\n    \n    constructor() {\n        this.baseUrl = \"https://httpbin.org\";\n        this.timeout = 5000;\n    }\n\n    async fetchUserData(userId) {\n        try {\n            const response = await axios.get(`${this.baseUrl}/get`, {\n                params: { userId },\n                timeout: this.timeout,\n                headers: {\n                    'Content-Type': 'application/json',\n                    'User-Agent': 'Lua-Skill/1.0'\n                }\n            });\n            \n            return {\n                id: userId,\n                name: response.data.args.userId || 'Unknown',\n                url: response.data.url,\n                status: 'success',\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            return {\n                id: userId,\n                name: 'Unknown',\n                url: null,\n                status: 'error',\n                error: error.message,\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n\n    async createPost(title, content) {\n        try {\n            const response = await axios.post(`${this.baseUrl}/post`, {\n                title,\n                content,\n                publishedAt: new Date().toISOString()\n            }, {\n                timeout: this.timeout,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            \n            return {\n                id: response.data.json.title || 'generated-id',\n                title: response.data.json.title,\n                status: 'created',\n                url: response.data.url\n            };\n        } catch (error) {\n            return {\n                id: null,\n                title,\n                status: 'error',\n                error: error.message,\n                url: null\n            };\n        }\n    }\n\n}\nconst apiService = new ApiService();\n\n        return apiService.fetchUserData(input.userId);\n    \n}"
    },
    {
      "name": "create_post",
      "description": "Create a new post",
      "inputSchema": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "content"
        ]
      },
      "outputSchema": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          }
        },
        "required": [
          "title",
          "content"
        ]
      },
      "execute": "async (input) => {\nconst { z } = require('zod');\nconst axios = require('axios');\nclass ApiService {\n\n    baseUrl;\n    timeout;\n    \n    constructor() {\n        this.baseUrl = \"https://httpbin.org\";\n        this.timeout = 5000;\n    }\n\n    async fetchUserData(userId) {\n        try {\n            const response = await axios.get(`${this.baseUrl}/get`, {\n                params: { userId },\n                timeout: this.timeout,\n                headers: {\n                    'Content-Type': 'application/json',\n                    'User-Agent': 'Lua-Skill/1.0'\n                }\n            });\n            \n            return {\n                id: userId,\n                name: response.data.args.userId || 'Unknown',\n                url: response.data.url,\n                status: 'success',\n                timestamp: new Date().toISOString()\n            };\n        } catch (error) {\n            return {\n                id: userId,\n                name: 'Unknown',\n                url: null,\n                status: 'error',\n                error: error.message,\n                timestamp: new Date().toISOString()\n            };\n        }\n    }\n\n    async createPost(title, content) {\n        try {\n            const response = await axios.post(`${this.baseUrl}/post`, {\n                title,\n                content,\n                publishedAt: new Date().toISOString()\n            }, {\n                timeout: this.timeout,\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            \n            return {\n                id: response.data.json.title || 'generated-id',\n                title: response.data.json.title,\n                status: 'created',\n                url: response.data.url\n            };\n        } catch (error) {\n            return {\n                id: null,\n                title,\n                status: 'error',\n                error: error.message,\n                url: null\n            };\n        }\n    }\n\n}\nconst apiService = new ApiService();\n\n        return apiService.createPost(input.title, input.content);\n    \n}"
    }
  ]
}